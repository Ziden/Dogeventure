//
// [ATTENTION]
// AUTO GENERATED BY EASY ADDRESSABLES //
// DO NOT MODIFY THIS FILE MANUALLY !!!
//

using System.Collections.Generic;
using System;
using System.Threading.Tasks;
using EasyAddressables;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UIElements;
namespace GameAddressables
{
	public class AssetService : IAssetService
	{
		private AssetContainer<AssetSoundEffect,AudioClip> _assetsoundeffect = new AssetContainer<AssetSoundEffect,AudioClip>();
		private AssetContainer<ObjectPrefab,GameObject> _objectprefab = new AssetContainer<ObjectPrefab,GameObject>();
		private AssetContainer<CollectiblePrefab,GameObject> _collectibleprefab = new AssetContainer<CollectiblePrefab,GameObject>();
		private AssetContainer<WeaponPrefab,GameObject> _weaponprefab = new AssetContainer<WeaponPrefab,GameObject>();
		private AssetContainer<AssetScene,Scene> _assetscene = new AssetContainer<AssetScene,Scene>();
		private AssetContainer<ShieldPrefab,GameObject> _shieldprefab = new AssetContainer<ShieldPrefab,GameObject>();
		private AssetContainer<VfxPrefab,GameObject> _vfxprefab = new AssetContainer<VfxPrefab,GameObject>();
		private AssetContainer<ConfigAsset,ScriptableObject> _configasset = new AssetContainer<ConfigAsset,ScriptableObject>();
		private AssetContainer<AssetSprite,Sprite> _assetsprite = new AssetContainer<AssetSprite,Sprite>();
		private AssetContainer<AssetTexture,Texture2D> _assettexture = new AssetContainer<AssetTexture,Texture2D>();
		private AssetContainer<AssetMaterial,Material> _assetmaterial = new AssetContainer<AssetMaterial,Material>();
		private AssetContainer<AssetUIScreen,VisualTreeAsset> _assetuiscreen = new AssetContainer<AssetUIScreen,VisualTreeAsset>();
		private AssetContainer<AssetPanelSettings,PanelSettings> _assetpanelsettings = new AssetContainer<AssetPanelSettings,PanelSettings>();
		private AssetContainer<AssetFont,Font> _assetfont = new AssetContainer<AssetFont,Font>();
		private AssetContainer<AssetGameObject,GameObject> _assetgameobject = new AssetContainer<AssetGameObject,GameObject>();
		
		public async Task GetAudioClipAsync(AssetSoundEffect id, Action<AudioClip> onComplete=null)
		{
			await _assetsoundeffect.LoadAsync(id, onComplete);
		}
		
		public async Task GetGameObjectAsync(ObjectPrefab id, Action<GameObject> onComplete=null)
		{
			await _objectprefab.LoadAsync(id, onComplete);
		}
		
		public async Task InstantiateObjectPrefabAsync(ObjectPrefab id, Action<GameObject> onComplete)
		{
			await _objectprefab.InstantiateAsync(id, onComplete);
		}
		
		public async Task GetGameObjectAsync(CollectiblePrefab id, Action<GameObject> onComplete=null)
		{
			await _collectibleprefab.LoadAsync(id, onComplete);
		}
		
		public async Task InstantiateCollectiblePrefabAsync(CollectiblePrefab id, Action<GameObject> onComplete)
		{
			await _collectibleprefab.InstantiateAsync(id, onComplete);
		}
		
		public async Task GetGameObjectAsync(WeaponPrefab id, Action<GameObject> onComplete=null)
		{
			await _weaponprefab.LoadAsync(id, onComplete);
		}
		
		public async Task InstantiateWeaponPrefabAsync(WeaponPrefab id, Action<GameObject> onComplete)
		{
			await _weaponprefab.InstantiateAsync(id, onComplete);
		}
		
		public async Task GetSceneAsync(AssetScene id, Action<Scene> onComplete=null)
		{
			await _assetscene.LoadAsync(id, onComplete);
		}
		
		public async Task GetGameObjectAsync(ShieldPrefab id, Action<GameObject> onComplete=null)
		{
			await _shieldprefab.LoadAsync(id, onComplete);
		}
		
		public async Task InstantiateShieldPrefabAsync(ShieldPrefab id, Action<GameObject> onComplete)
		{
			await _shieldprefab.InstantiateAsync(id, onComplete);
		}
		
		public async Task GetGameObjectAsync(VfxPrefab id, Action<GameObject> onComplete=null)
		{
			await _vfxprefab.LoadAsync(id, onComplete);
		}
		
		public async Task InstantiateVfxPrefabAsync(VfxPrefab id, Action<GameObject> onComplete)
		{
			await _vfxprefab.InstantiateAsync(id, onComplete);
		}
		
		public async Task GetScriptableObjectAsync(ConfigAsset id, Action<ScriptableObject> onComplete=null)
		{
			await _configasset.LoadAsync(id, onComplete);
		}
		
		public async Task GetSpriteAsync(AssetSprite id, Action<Sprite> onComplete=null)
		{
			await _assetsprite.LoadAsync(id, onComplete);
		}
		
		public async Task GetTexture2DAsync(AssetTexture id, Action<Texture2D> onComplete=null)
		{
			await _assettexture.LoadAsync(id, onComplete);
		}
		
		public async Task GetMaterialAsync(AssetMaterial id, Action<Material> onComplete=null)
		{
			await _assetmaterial.LoadAsync(id, onComplete);
		}
		
		public async Task GetVisualTreeAssetAsync(AssetUIScreen id, Action<VisualTreeAsset> onComplete=null)
		{
			await _assetuiscreen.LoadAsync(id, onComplete);
		}
		
		public async Task GetPanelSettingsAsync(AssetPanelSettings id, Action<PanelSettings> onComplete=null)
		{
			await _assetpanelsettings.LoadAsync(id, onComplete);
		}
		
		public async Task GetFontAsync(AssetFont id, Action<Font> onComplete=null)
		{
			await _assetfont.LoadAsync(id, onComplete);
		}
		
		public async Task GetGameObjectAsync(AssetGameObject id, Action<GameObject> onComplete=null)
		{
			await _assetgameobject.LoadAsync(id, onComplete);
		}
		
		public async Task InstantiateAssetGameObjectAsync(AssetGameObject id, Action<GameObject> onComplete)
		{
			await _assetgameobject.InstantiateAsync(id, onComplete);
		}
		
	}
}
