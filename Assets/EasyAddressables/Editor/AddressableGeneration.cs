using Assets.EasyAddressables.Editor;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditor.AddressableAssets;
using UnityEditor.AddressableAssets.Settings;
using UnityEngine;


namespace Code.Editor
{
    public class AddressableGeneration
    {
        public static string HEADER = "//\n// [ATTENTION]\n// AUTO GENERATED BY EASY ADDRESSABLES //\n// DO NOT MODIFY THIS FILE MANUALLY !!!\n//\n";


        /// <summary>
        /// Generates code to manipulate addressables.
        /// Will generate an indexing enum, a interface and its implementation
        /// </summary>
        public static void EasyAddressablesCodegen()
        {
            Directory.CreateDirectory(AddressablePrefs.GENERATION_PATH);
            CodegenEnum.GenerateEnum();
            CodegenInterface.GenerateInterface();
            CodegenService.GenerateService();
            AssetDatabase.Refresh();
        }

        /// <summary>
        /// Create all missing addressables. Will loop on folder to do so.
        /// </summary>
        public static void CreateMissingAddressables()
        {
            var root = Application.dataPath + "/../";
            var folder = root + AddressablePrefs.SOURCE_PATH;
            var files = Directory.GetFiles(folder, "*.*", SearchOption.AllDirectories);
            foreach (string f in files)
            {
                if (f.EndsWith(".meta")) continue;
                if (f.StartsWith(".")) continue;
                var path = f.Replace(root, "");
                AddAssetToGroup(path);
            }
        }

        internal static void AddAssetToGroup(string path)
        {
            var group = AddressableAssetSettingsDefaultObject.Settings.DefaultGroup;
            var entry = AddressableAssetSettingsDefaultObject.Settings.CreateOrMoveEntry(AssetDatabase.AssetPathToGUID(path), group,
                false,
                true);

            if (entry == null)
            {
                Debug.LogError($"Addressable : can't add {path} to group {group.name}");
            }
            else
            {
                Debug.Log($"Added {path} To Adressables");
            }
        }


        internal static List<AddressableAssetEntry> GetAddressables()
        {
            var assetList = new List<AddressableAssetEntry>();
            var assetsSettings = AddressableAssetSettingsDefaultObject.Settings;
            if (assetsSettings == null)
            {
                throw new Exception("You do not have items flagged as addressables. Please add addressables.");
            }
            foreach (var settingsGroup in assetsSettings.groups)
            {
                if (settingsGroup.ReadOnly)
                {
                    Debug.Log("Group " + settingsGroup.name + " is readonly");
                }
                Debug.Log("Reading Group " + settingsGroup.name);
                settingsGroup.GatherAllAssets(assetList, true, true, false);
            }
            return assetList.Where(a => assetsSettings.FindAssetEntry(a.guid) != null).ToList();
        }

        internal static string FormatEnumName(string s)
        {
            var x = s.Replace(" ", "");
            x = x.Replace("-", "_");
            x = x.Replace("(", "_");
            x = x.Replace(")", "");
            x = x.Replace(".", "_");
            x = x.Replace("%", "pct");
            if (x.Length == 0) return "null";
            x = Regex.Replace(x, "([A-Z])([A-Z]+)($|[A-Z])",
                m => m.Groups[1].Value + m.Groups[2].Value.ToLower() + m.Groups[3].Value);
            var camel = char.ToLower(x[0]) + x.Substring(1);
            return char.ToUpper(camel[0]) + camel.Substring(1);
        }
    }
}